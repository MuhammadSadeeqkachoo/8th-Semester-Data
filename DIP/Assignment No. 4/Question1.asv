% Clear environment
clc; clear; close all;

% Load grayscale image
img = imread('cameraman.tif'); % You can replace this with your own image
img = im2double(img);
[M, N] = size(img);

% Fourier Transform
F = fft2(img);
F_shifted = fftshift(F);

% Set cutoff frequency
D0 = 50;

% Create meshgrid
u = 0:(M-1);
v = 0:(N-1);
u = u - floor(M/2);
v = v - floor(N/2);
[U, V] = meshgrid(v, u);
D = sqrt(U.^2 + V.^2);

% Ideal Lowpass Filter
H_ideal = double(D <= D0);

% Butterworth Lowpass Filter (order = 2)
n = 2;
H_butter = 1 ./ (1 + (D ./ D0).^(2 * n));

% Gaussian Lowpass Filter
H_gauss = exp(-(D.^2) ./ (2 * D0^2));

% Apply filters in frequency domain
G_ideal = F_shifted .* H_ideal;
G_butter = F_shifted .* H_butter;
G_gauss = F_shifted .* H_gauss;

% Inverse FFT
img_ideal = real(ifft2(ifftshift(G_ideal)));
img_butter = real(ifft2(ifftshift(G_butter)));
img_gauss = real(ifft2(ifftshift(G_gauss)));

% Display results
figure('Name', 'Frequency Domain Smoothing Comparison');

subplot(3,2,1), imshow(img, []), title('Original Image');
subplot(3,2,2), imshow(log(1+abs(F_shifted)), []), title('Original Spectrum');

subplot(3,2,5), imshow(img_ideal, []), title('ILPF Output');
subplot(3,2,6), imshow(log(1+abs(G_ideal)), []), title('ILPF Spectrum');

subplot(3,2,7), imshow(img_butter, []), title('BLPF (n=2) Output');
subplot(3,2,8), imshow(log(1+abs(G_butter)), []), title('BLPF Spectrum');

subplot(3,4,9), imshow(img_gauss, []), title('GLPF Output');
subplot(3,4,10), imshow(log(1+abs(G_gauss)), []), title('GLPF Spectrum');
